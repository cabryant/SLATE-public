/** *  */package com.learning.slate.toolkits;import java.awt.Font;import java.awt.Graphics2D;import java.awt.geom.AffineTransform;import java.awt.image.BufferedImage;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import javax.imageio.ImageIO;import sun.audio.AudioPlayer;import sun.audio.AudioStream;/** * @author coram * */public class Resources{	public enum TextType {				Dialog_30(new Font("Dialog", Font.PLAIN, 30)),		CalibrationInstructions(new Font("Dialog", Font.PLAIN, 34)),		NameEntry(new Font("Dialog", Font.PLAIN, 24)),		LogSelect(new Font("Dialog", Font.PLAIN, 12));				TextType(Font font) { this.font = font; }		private Font font;		public Font getFont() { return font; }	}		public static void drawHeaderImage(Graphics2D g2, String fileName) throws IOException	{		drawImage(g2, fileName);	}		public static void drawSlideShowImage(Graphics2D g2, String fileName) throws IOException	{		// TODO - different translation?		drawImage(g2, fileName);	}		private static void drawImage(Graphics2D g2, String fileName)	{		BufferedImage img = null;		try {			img = ImageIO.read(new File(fileName));		} catch (Exception e) {			// TODO Auto-generated catch block			System.err.println("\n\n\n\n" + fileName + "\n\n\n\n");			e.printStackTrace();			return;		}				AffineTransform saveXform = g2.getTransform();					AffineTransform transform = new AffineTransform();		transform.rotate(Math.toRadians(-90));		transform.translate(-img.getWidth(), 0);		//		transform.translate(-img.getWidth(), (Slate.WINDOW_WIDTH - img.getHeight())/2);		g2.transform(transform);					g2.drawImage(img, null, 0, 0);		g2.setTransform(saveXform);	}		public static AudioStream playAudio(String audioFileName)	{		// http://www.javaworld.com/javaworld/javatips/jw-javatip24.html		try {			InputStream in = new FileInputStream(audioFileName);			AudioStream as = new AudioStream(in);         			AudioPlayer.player.start(as);			return as;			//Thread.sleep(duration);			//AudioPlayer.player.stop(as); 		} catch (FileNotFoundException e) {			e.printStackTrace();		} catch (IOException e) {			System.err.println(audioFileName);			e.printStackTrace();		}/* catch (InterruptedException e) {			e.printStackTrace();		}*/				return null;	}		public static void stopAudioStream(AudioStream as)	{		AudioPlayer.player.stop(as);	}		public static boolean isInTutorialZone(float projectedX, float projectedY)	{		// OLD TUTORIAL ZONE:		// the image is roughly 145 x 145, and the tutorial circle is roughly 115 x 115		// the entire image is translated (15,15) from (185, 0)		// Given the 30 pixel gap between the edge of the image and the tutorial circle		// the bounds are [230, 345] in the X direction, and [45, 160] in the Y direction		//return (projectedX > 230) && (projectedX < 345) && (projectedY > 45) && (projectedY < 160);				// FIXME - genericize via width and height? - may be ok, since it's pixels 		// New Tutorial Zone (top-left corner)		return (projectedX > 0) && (projectedX < 150) && (projectedY < 768) && (projectedY > 618);	}}