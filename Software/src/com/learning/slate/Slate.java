/* 	SLATE has been adapted from the TUIO Java Demo 	(part of the reacTIVision project http://reactivision.sourceforge.net)		SLATE has been modified under the terms of the GNU General Public	License as published by the Free Software Foundation (version 2).*/package com.learning.slate;import java.awt.GraphicsConfiguration;import java.awt.GraphicsDevice;import java.awt.GraphicsEnvironment;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.List;import javax.swing.JComboBox;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.JRootPane;import TUIO.TuioClient;import com.learning.slate.data.DataManager;import com.learning.slate.data.SlateSettings;public class Slate implements ActionListener{	private GraphicsDevice device;	private JFrame frame;		//Process reacTIVisionProcess;		TuioClient tuioClient;	private SlateSettings slateSettings;		// Listeners	private SlateComponent slateComponent;	private CalibrationComponent calibrationComponent;		private Mode mode;	public static enum Mode {		Slate,		System_Calibration,		Toolkit_Calibration	}	public Mode getMode() { return mode; }		public void init(String toolkitName) {				// FIXME?		//launchReacTIVision();			GraphicsDevice[] devices = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();		// In a single-monitor system, this will select the single monitor.		// In a dual-monitor system, this will select the second monitor.		// Note: this is not a full-proof approach, but it should work for most cases.		device = devices[devices.length - 1];				slateSettings = DataManager.getSlateSettings();		if (toolkitName != null) {			slateSettings.setToolkit(toolkitName);			DataManager.saveSlateSettings(slateSettings);		}				tuioClient = new TuioClient();		tuioClient.connect();				slateComponent = new SlateComponent(slateSettings);		calibrationComponent = new CalibrationComponent(this, slateSettings);				// start w/ a SLATE session		setupWindow(slateComponent);		startSlateSession();				selectToolkit();				frame.requestFocus();	}		/*	private void launchReacTIVision() {		try{			reacTIVisionProcess = 				Runtime.getRuntime().exec(					DataManager.getReacTIVisionExecutableName(),					null,					DataManager.getReacTIVisionDirectory());		} catch (Throwable t) {			t.printStackTrace();		}	}*/		synchronized private void startSlateSession() {		mode = Mode.Slate;		slateComponent.reset();		tuioClient.removeAllTuioListeners();		tuioClient.addTuioListener(slateComponent);		switchComponent(slateComponent);		showWindow();	}		private void startCalibrationSession(Mode newMode) {		mode = newMode;		calibrationComponent.start();		tuioClient.removeAllTuioListeners();		tuioClient.addTuioListener(calibrationComponent);		switchComponent(calibrationComponent);		showWindow();	}		public void switchComponent(JComponent component) {		if (component.equals(slateComponent)) {			frame.remove(calibrationComponent);		} else {			frame.remove(slateComponent);		}		frame.add(component);	}		public void setupWindow(JComponent component)	{		frame = new JFrame();		frame.add(component);		//frame.setUndecorated(slateSettings.getUndecorated());		frame.setUndecorated(true);		frame.setResizable(false);				// Shift to external display		//if (slateSettings.getExternalDisplay())		//{			//Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();			//frame.setLocation(screenSize.width, 0);					GraphicsConfiguration gc = device.getDefaultConfiguration();			frame.setLocation((int) gc.getBounds().getX(), (int) gc.getBounds().getY());			//System.out.println("(" + gc.getBounds().getX() + ", " + gc.getBounds().getY() + ", " 			// + gc.getBounds().getWidth() + ", " + gc.getBounds().getHeight() + ")");		//}				frame.addWindowListener( new WindowAdapter()		{			public void windowClosing(WindowEvent evt)			{				//reacTIVisionProcess.destroy();				System.exit(0);			}		});				frame.addKeyListener( new KeyAdapter() { public void keyPressed(KeyEvent evt)		{			if (evt.getKeyCode() == KeyEvent.VK_ESCAPE)			{				System.exit(0);			}			else if (evt.getKeyCode() == KeyEvent.VK_H)			{				slateSettings.setHelpParadigm(slateSettings.getHelpParadigm().next());				DataManager.saveSlateSettings(slateSettings);			}			else if (evt.getKeyCode() == KeyEvent.VK_L)			{				slateComponent.toggleEventLogger();			}			else if (evt.getKeyCode() == KeyEvent.VK_V)			{				Logger.toggleVerbose();			}			else if (evt.getKeyCode() == KeyEvent.VK_R)			{				slateComponent.reset();				//calibrationComponent.reset();			}			else if (evt.getKeyCode() == KeyEvent.VK_T)			{				changeMode(Mode.Toolkit_Calibration);			}			else if (evt.getKeyCode() == KeyEvent.VK_C)			{				changeMode(Mode.System_Calibration);			}			// TODO SELECT TOOLKIT OPTION			// TODO launch select toolkit dialog			// TODO should be TUIO-based, but we'll do it the simple way for now			//String toolkitName = slateSettings.getToolkit();			//destroyWindow();			//slateSettings.setToolkit(toolkitName);			//startSlateSession();		} });	}	private void selectToolkit() {		JFrame jframe = new JFrame("Select Toolkit");		JPanel jpanel = new JPanel();		List<String> toolkitNames = DataManager.getInstalledToolkits();		JComboBox toolkitList = new JComboBox(toolkitNames.toArray());		toolkitList.setSelectedIndex(toolkitNames.indexOf(slateSettings.getToolkit()));		toolkitList.addActionListener(this);		    		jframe.setUndecorated(true);		jframe.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);		jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		jpanel.add(toolkitList);		jframe.add(jpanel);		jframe.pack();		jframe.setBounds(				jframe.getX(),				jframe.getY(),				jframe.getWidth() < 125 ? 125 : jframe.getWidth(),				jframe.getHeight());		jframe.setAlwaysOnTop(true);		jframe.setLocationRelativeTo(null);		jframe.setVisible(true);	}		public void actionPerformed(ActionEvent e) {		JComboBox cb = (JComboBox)e.getSource();		String toolkitName = (String)cb.getSelectedItem();		if (toolkitName != null) {			slateSettings.setToolkit(toolkitName);			DataManager.saveSlateSettings(slateSettings);		}		slateComponent.load(slateSettings);		slateComponent.repaint();				frame.requestFocus();	}		public void changeMode(Mode newMode) {		if (mode.equals(newMode)) {			// This is a toggle, so return to Slate Session			startSlateSession();		} else {			// This is moving into one of the setup modes			startCalibrationSession(newMode);		}	}		public void destroyWindow()	{		frame.setVisible(false);		/*if (slateSettings.getFullScreen())		{			device.setFullScreenWindow(null);				}*/		frame = null;	}		public void showWindow()	{		/*if (slateSettings.getFullScreen())		{			int width  = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();			int height = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();			slateComponent.setSize(width, height);			slateSettings.setWindowWidth(width);			slateSettings.setWindowHeight(height);			frame.setSize(width,height);			frame.setUndecorated(true);			device.setFullScreenWindow(frame);				}		else		{*/			int width  = slateSettings.getWindowWidth();			int height = slateSettings.getWindowHeight();			slateComponent.setSize(width, height);			//slateSettings.setWindowWidth(width);			//slateSettings.setWindowHeight(height);						frame.pack();			Insets insets = frame.getInsets();						frame.setSize(width, height + insets.top);			//}		DataManager.saveSlateSettings(slateSettings);				frame.setVisible(true);		frame.repaint();	}		public static void main(String argv[])	{			try		{			String toolkit = (argv.length > 0) ? argv[0] : null;			Slate slate = new Slate();			slate.init(toolkit);		}		catch (Exception e)		{			e.printStackTrace();		}	}}